CSCI2720 Project  3 
Project Requirements:

2.[10Points]
	Add the a non-recursive member  functions: LevelOrderPrint() That  prints  the  tree level  by level.  

4.[15 Points] (completed PT 1)
	PT 1) Add a private  function PtrToSuccessor that  finds  the  node with  the smallest  key value  in  a tree, and returns  a pointer  to that  node.

		template<class ItemType> TreeNode<ItemType>*  PtrToSuccessor(TreeNode<ItemType>*&  tree)

	PT 2) Modify  the DeleteNodefunction  so that  it  uses  the immediate  successor  (rather  than  the predecessor)  of the  value  to be deleted  in  the case of deleting  a node with  two children.  You should  callPtrToSuccessor() function  that  you  defined  in  part 3.

6.[15Points]
	Add to TreeType a public member  function MirrorImage that creates  and returns  a mirror image  of the  tree.
	The function MirrorImage calls a recursive function Mirror that  returns  the mirror  image  of the original  tree as follows: 
		
		TreeType<ItemType>  TreeType<ItemType>::MirrorImage();
		// Calls  recursive  function  Mirror.
		// Post:  A tree that  is  the  mirror  image  the tree is  returned.

7.[15Points]
	Write  a client function MakeTree that creates a binary  search  tree from  the  elements in  a sorted list  of  integers.  Input parameter  to this  function  is  a sorted array.  (read the sorted array from  the  text  file  input.txt  see part 8 ). You  cannot  traverse  the  list  inserting  the elements  in  order, as that  would  produce  a tree that  has N levels.  You  must  create a tree with  at most  logv2N+ 1 levels.

8.[10Points]
	Test  your  implementation  using TreeDr.cpp.  This program must  display  a menu for  all  operations (you  can  use  and modify  the  attached  file  TreeDr.cpp).This program mustread all  input from  a text  file  called input.txt and  display output  on screen.



